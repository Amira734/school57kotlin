package ru.tbank.education.school.lesson3.seminar.bank

abstract class Account(
    val id: String,
    val owner: Customer,
    val currency: Currency
) {
    protected var balance: Int = 0
    protected val transactions = mutableListOf<Transaction>()

    abstract fun deposit(amount: Int, description: String): Boolean
    abstract fun withdraw(amount: Int, description: String): Boolean

    fun transfer(to: Account, amount: Int, description: String): Boolean {
        if (!withdraw(amount, description)) return false
        if (!to.deposit(amount, description)) return false
        return true
    }

    protected fun record(tx: Transaction) {
        transactions += tx
    }

    fun printReport() {
        println("üìä –û—Ç—á—ë—Ç –ø–æ —Å—á—ë—Ç—É $id (–≤–ª–∞–¥–µ–ª–µ—Ü: ${owner.fullName})")
        println("–ë–∞–ª–∞–Ω—Å: $balance $currency")
        println("–û–ø–µ—Ä–∞—Ü–∏–∏:")

        if (transactions.isEmpty()) {
            println("  (–Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π)")
        } else {
            transactions.forEach {
                when (it) {
                    is DepositTransaction ->
                        println("[${it.id}] –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: +${it.amount}, –æ–ø–∏—Å–∞–Ω–∏–µ: ${it.description}")
                    is WithdrawalTransaction ->
                        println("[${it.id}] –°–ø–∏—Å–∞–Ω–∏–µ: -${it.amount}, –æ–ø–∏—Å–∞–Ω–∏–µ: ${it.description}")
                    is TransferTransaction ->
                        println("[${it.id}] –ü–µ—Ä–µ–≤–æ–¥: ${it.from.id} -> ${it.to.id}, —Å—É–º–º–∞: ${it.amount}, –æ–ø–∏—Å–∞–Ω–∏–µ: ${it.description}")
                }
            }
        }
    }

}